from keep_alive import keep_alive

keep_alive()
import pytz
import asyncio
import logging
import csv
import os
from datetime import datetime
from typing import Dict, List, Optional
import re

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7621682452:AAEPwo3N5U1fe6CoYGlamfuSAuhioSSq1gU"
ADMIN_ID = 1022315859
ADMIN_PASSWORD = "Medeu2025"

# –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è QR-–∫–æ–¥–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
QR_CODE_SECRET = "medeu_center_checkin_2025"
QR_CODE_LINK = "https://t.me/MedeuCommunityBot?start=medeu_center_checkin_2025"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATES = {}
REGISTRATION_DATA = {}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQLite –∏–ª–∏ PostgreSQL)
USERS_DB = {
}  # {user_id: {"name": str, "phone": str, "registered_at": datetime}}
CHECKINS_DB = [
]  # [{"user_id": int, "name": str, "phone": str, "timestamp": datetime, "method": str}]
ADMIN_SESSIONS = {}  # {user_id: bool} - –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class States:
    WAITING_NAME = "waiting_name"
    WAITING_PHONE = "waiting_phone"
    WAITING_ADMIN_PASSWORD = "waiting_admin_password"
    WAITING_QR_SCAN = "waiting_qr_scan"
    ADMIN_MENU = "admin_menu"
    CONFIRM_CLEAR_DATA = "confirm_clear_data"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
    CONFIRM_CLEAR_CHECKINS = "confirm_clear_checkins"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π


def is_valid_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: +7 (7xx) xxx-xx-xx
    pattern = r'^\+7[0-9]{10}$|^8[0-9]{10}$|^7[0-9]{10}$'
    return bool(
        re.match(
            pattern,
            phone.replace(' ', '').replace('-',
                                           '').replace('(',
                                                       '').replace(')', '')))


def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    clean_phone = phone.replace(' ',
                                '').replace('-',
                                            '').replace('(',
                                                        '').replace(')', '')
    if clean_phone.startswith('8'):
        clean_phone = '+7' + clean_phone[1:]
    elif clean_phone.startswith('7'):
        clean_phone = '+' + clean_phone
    elif not clean_phone.startswith('+7'):
        clean_phone = '+7' + clean_phone
    return clean_phone


def phone_exists(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ"""
    normalized_phone = normalize_phone(phone)
    for user_data in USERS_DB.values():
        if user_data["phone"] == normalized_phone:
            return True
    return False


def get_user_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [[KeyboardButton("üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è")],
                [KeyboardButton("‚ÑπÔ∏è –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [[
        KeyboardButton("üë• –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        KeyboardButton("üïí –û—Ç—á–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π")
    ], [
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton("üîó QR-–∫–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫")
    ],
                [
                    KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
                    KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è")
                ], [KeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_confirm_clear_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = [[KeyboardButton("‚úÖ –î–ê, –û–ß–ò–°–¢–ò–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï")],
                [KeyboardButton("‚ùå –ù–ï–¢, –û–¢–ú–ï–ù–ò–¢–¨")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_confirm_clear_checkins_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π"""
    keyboard = [[KeyboardButton("‚úÖ –î–ê, –û–ß–ò–°–¢–ò–¢–¨ –ü–û–°–ï–©–ï–ù–ò–Ø")],
                [KeyboardButton("‚ùå –ù–ï–¢, –û–¢–ú–ï–ù–ò–¢–¨")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ QR-–∫–æ–¥
    if context.args and context.args[0] == QR_CODE_SECRET:
        if user_id not in USERS_DB:
            await update.message.reply_text(
                "‚ùå **–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!**\n\n"
                "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.",
                parse_mode='Markdown')
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ QR-–∫–æ–¥
        await qr_checkin(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in USERS_DB:
        user_data = USERS_DB[user_id]
        await update.message.reply_text(
            f"üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user_data['name']}!**\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
            f"üí° *–î–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Ü–µ–Ω—Ç—Ä*",
            reply_markup=get_user_keyboard(),
            parse_mode='Markdown')
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        USER_STATES[user_id] = States.WAITING_NAME
        await update.message.reply_text(
            "üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ Medeu Community!**\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
            "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.):",
            parse_mode='Markdown')


async def handle_name_input(update: Update,
                            context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    name = update.message.text.strip()

    if len(name) < 2:
        await update.message.reply_text(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return

    REGISTRATION_DATA[user_id] = {"name": name}
    USER_STATES[user_id] = States.WAITING_PHONE

    await update.message.reply_text(
        f"‚úÖ –ò–º—è –ø—Ä–∏–Ω—è—Ç–æ: **{name}**\n\n"
        f"üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"+77011234567 –∏–ª–∏ 87011234567",
        parse_mode='Markdown')


async def handle_phone_input(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    phone = update.message.text.strip()

    if not is_valid_phone(phone):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +77011234567 –∏–ª–∏ 87011234567",
            parse_mode='Markdown')
        return

    normalized_phone = normalize_phone(phone)

    if phone_exists(phone):
        await update.message.reply_text(
            "‚ùå **–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.**\n\n"
            "–ö–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown')
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    name = REGISTRATION_DATA[user_id]["name"]
    USERS_DB[user_id] = {
        "name": name,
        "phone": normalized_phone,
        "registered_at": datetime.now()
    }

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del REGISTRATION_DATA[user_id]
    del USER_STATES[user_id]

    await update.message.reply_text(
        f"üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n\n"
        f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏!\n"
        f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è\" –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ",
        reply_markup=get_user_keyboard(),
        parse_mode='Markdown')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üÜï **–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
            parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def handle_checkin_request(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É - –ø—Ä–æ—Å–∏–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥"""
    user_id = update.effective_user.id

    if user_id not in USERS_DB:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                                        "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
    USER_STATES[user_id] = States.WAITING_QR_SCAN

    keyboard = [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üì± **–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Ü–µ–Ω—Ç—Ä**\n\n"
        "üîç –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ QR-–∫–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à—É—é—Å—è —Å—Å—ã–ª–∫—É\n\n"
        "üí° *QR-–∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–µ–Ω–¥–µ —É –≤—Ö–æ–¥–∞ –≤ Medeu Community*\n\n"
        "‚ö†Ô∏è –û—Ç–º–µ—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ QR-–∫–æ–¥–∞ —Ü–µ–Ω—Ç—Ä–∞",
        reply_markup=reply_markup,
        parse_mode='Markdown')


async def qr_checkin(update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ—Ç–∫–∞ —á–µ—Ä–µ–∑ QR-–∫–æ–¥"""
    user_id = update.effective_user.id
    user_data = USERS_DB[user_id]
    timestamp = datetime.now()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–º–µ—Ç–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞
    checkin_record = {
        "user_id": user_id,
        "name": user_data["name"],
        "phone": user_data["phone"],
        "timestamp": timestamp,
        "method": "QR-–∫–æ–¥"
    }
    CHECKINS_DB.append(checkin_record)

    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    if user_id in USER_STATES and USER_STATES[
            user_id] == States.WAITING_QR_SCAN:
        del USER_STATES[user_id]

    await update.message.reply_text(
        f"‚úÖ **–û—Ç–º–µ—Ç–∫–∞ —á–µ—Ä–µ–∑ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–∞!**\n\n"
        f"üë§ {user_data['name']}\n"
        f"üïí {timestamp.strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"üìç –°–ø–æ—Å–æ–±: QR-–∫–æ–¥ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ)\n\n"
        f"üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Medeu Community!\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ! üôè",
        reply_markup=get_user_keyboard(),
        parse_mode='Markdown')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìç **–ù–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ (QR-–∫–æ–¥)**\n\n"
            f"üë§ {user_data['name']}\n"
            f"üì± {user_data['phone']}\n"
            f"üïí {timestamp.strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ",
            parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def handle_user_info(update: Update,
                           context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = update.effective_user.id

    if user_id not in USERS_DB:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    user_data = USERS_DB[user_id]

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
    user_checkins = [c for c in CHECKINS_DB if c["user_id"] == user_id]
    qr_checkins = [c for c in user_checkins if c["method"] == "QR-–∫–æ–¥"]

    info_text = (
        f"‚ÑπÔ∏è **–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n"
        f"üë§ –ò–º—è: {user_data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['registered_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:**\n"
        f"üî¢ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {len(user_checkins)}\n"
        f"üì± –ß–µ—Ä–µ–∑ QR-–∫–æ–¥: {len(qr_checkins)}\n")

    if user_checkins:
        last_checkin = max(user_checkins, key=lambda x: x["timestamp"])
        info_text += f"\n\nüïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ:\n{last_checkin['timestamp'].strftime('%d.%m.%Y %H:%M')} ({last_checkin['method']})"

    await update.message.reply_text(info_text, parse_mode='Markdown')


async def manager_command(update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id

    USER_STATES[user_id] = States.WAITING_ADMIN_PASSWORD
    await update.message.reply_text(
        "üîê **–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        parse_mode='Markdown')


async def handle_admin_password(update: Update,
                                context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    password = update.message.text.strip()

    if password == ADMIN_PASSWORD:
        ADMIN_SESSIONS[user_id] = True
        USER_STATES[user_id] = States.ADMIN_MENU

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_qr_checkins = len(
            [c for c in CHECKINS_DB if c["method"] == "QR-–∫–æ–¥"])
        today_checkins = len([
            c for c in CHECKINS_DB
            if c['timestamp'].date() == datetime.now().date()
        ])

        stats_text = (f"‚úÖ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!**\n\n"
                      f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                      f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS_DB)}\n"
                      f"üìç –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {len(CHECKINS_DB)}\n"
                      f"üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—Ç–æ–∫: {today_checkins}\n"
                      f"üì± –ß–µ—Ä–µ–∑ QR-–∫–æ–¥: {total_qr_checkins}\n\n"
                      f"üîó **QR-–∫–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω**")

        await update.message.reply_text(stats_text,
                                        reply_markup=get_admin_keyboard(),
                                        parse_mode='Markdown')
    else:
        del USER_STATES[user_id]
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")


async def show_qr_code(update: Update,
                       context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫"""
    await update.message.reply_text(
        f"üîó **QR-–∫–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫ –ø–æ—Å–µ—â–µ–Ω–∏–π**\n\n"
        f"üì± –°—Å—ã–ª–∫–∞: {QR_CODE_LINK}\n\n"
        f"üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        f"1. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Ü–µ–Ω—Ç—Ä\n"
        f"2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∫–∞–Ω–∏—Ä—É—é—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏\n"
        f"3. –û—Ç–º–µ—Ç–∫–∞ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏\n\n"
        f"üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞\n"
        f"‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        f"‚Ä¢ –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è",
        parse_mode='Markdown')


async def request_clear_data(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_SESSIONS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    USER_STATES[user_id] = States.CONFIRM_CLEAR_DATA

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    stats_text = (f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –û–ß–ò–°–¢–ö–ê –í–°–ï–• –î–ê–ù–ù–´–•**\n\n"
                  f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å:\n"
                  f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS_DB)}\n"
                  f"üìç –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–µ–Ω–∏–π: {len(CHECKINS_DB)}\n\n"
                  f"üö® **–≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û!**\n"
                  f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
                  f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")

    await update.message.reply_text(stats_text,
                                    reply_markup=get_confirm_clear_keyboard(),
                                    parse_mode='Markdown')


async def confirm_clear_data(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in ADMIN_SESSIONS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    if text == "‚úÖ –î–ê, –û–ß–ò–°–¢–ò–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
        users_count = len(USERS_DB)
        checkins_count = len(CHECKINS_DB)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        USERS_DB.clear()
        CHECKINS_DB.clear()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
        users_to_remove = [uid for uid in USER_STATES.keys() if uid != user_id]
        for uid in users_to_remove:
            del USER_STATES[uid]

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        REGISTRATION_DATA.clear()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ –º–µ–Ω—é
        USER_STATES[user_id] = States.ADMIN_MENU

        success_text = (f"‚úÖ **–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!**\n\n"
                        f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ:**\n"
                        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                        f"üìç –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–µ–Ω–∏–π: {checkins_count}\n\n"
                        f"üîÑ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                        f"QR-–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.")

        await update.message.reply_text(success_text,
                                        reply_markup=get_admin_keyboard(),
                                        parse_mode='Markdown')

        logger.info(
            f"–ê–¥–º–∏–Ω {user_id} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}, –ø–æ—Å–µ—â–µ–Ω–∏–π: {checkins_count}"
        )

    elif text == "‚ùå –ù–ï–¢, –û–¢–ú–ï–ù–ò–¢–¨":
        USER_STATES[user_id] = States.ADMIN_MENU
        await update.message.reply_text(
            "‚ùå –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text(
            "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_confirm_clear_keyboard())


async def request_clear_checkins(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–µ—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_SESSIONS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    USER_STATES[user_id] = States.CONFIRM_CLEAR_CHECKINS

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    stats_text = (
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –û–ß–ò–°–¢–ö–ê –ü–û–°–ï–©–ï–ù–ò–ô**\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å:\n"
        f"üìç –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–µ–Ω–∏–π: {len(CHECKINS_DB)}\n\n"
        f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏**\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS_DB)} (–Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)\n\n"
        f"üö® **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!**\n"
        f"–í—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")

    await update.message.reply_text(
        stats_text,
        reply_markup=get_confirm_clear_checkins_keyboard(),
        parse_mode='Markdown')


async def confirm_clear_checkins(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in ADMIN_SESSIONS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    if text == "‚úÖ –î–ê, –û–ß–ò–°–¢–ò–¢–¨ –ü–û–°–ï–©–ï–ù–ò–Ø":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
        checkins_count = len(CHECKINS_DB)
        users_count = len(USERS_DB)

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏–π
        CHECKINS_DB.clear()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ –º–µ–Ω—é
        USER_STATES[user_id] = States.ADMIN_MENU

        success_text = (
            f"‚úÖ **–ü–æ—Å–µ—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!**\n\n"
            f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ:**\n"
            f"üìç –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–µ–Ω–∏–π: {checkins_count}\n\n"
            f"‚úÖ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:**\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count} (–æ—Å—Ç–∞–ª–∏—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏)\n\n"
            f"üîÑ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π.\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–º–µ—á–∞—Ç—å—Å—è.")

        await update.message.reply_text(success_text,
                                        reply_markup=get_admin_keyboard(),
                                        parse_mode='Markdown')

        logger.info(
            f"–ê–¥–º–∏–Ω {user_id} –æ—á–∏—Å—Ç–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏–π. –£–¥–∞–ª–µ–Ω–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {checkins_count}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {users_count}"
        )

    elif text == "‚ùå –ù–ï–¢, –û–¢–ú–ï–ù–ò–¢–¨":
        USER_STATES[user_id] = States.ADMIN_MENU
        await update.message.reply_text(
            "‚ùå –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text(
            "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_confirm_clear_checkins_keyboard())


async def generate_users_report(update: Update,
                                context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not USERS_DB:
        await update.message.reply_text("üìù –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.")
        return

    filename = f"users_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

    with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'])

        for user_data in USERS_DB.values():
            writer.writerow([
                user_data['name'], user_data['phone'],
                user_data['registered_at'].strftime('%d.%m.%Y %H:%M:%S')
            ])

    await update.message.reply_text(f"üìÅ –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤!")

    with open(filename, 'rb') as file:
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=file,
            filename=filename,
            caption=
            f"üë• –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)


async def generate_checkins_report(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π"""
    if not CHECKINS_DB:
        await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –ø—É—Å—Ç–∞.")
        return

    filename = f"checkins_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

    with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(
            ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è', '–°–ø–æ—Å–æ–± –æ—Ç–º–µ—Ç–∫–∏'])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_checkins = sorted(CHECKINS_DB,
                                 key=lambda x: x['timestamp'],
                                 reverse=True)

        for checkin in sorted_checkins:
            writer.writerow([
                checkin['name'], checkin['phone'],
                checkin['timestamp'].strftime('%d.%m.%Y %H:%M:%S'),
                checkin['method']
            ])

    await update.message.reply_text(f"üìÅ –û—Ç—á–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π –≥–æ—Ç–æ–≤!")

    with open(filename, 'rb') as file:
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=file,
            filename=filename,
            caption=
            f"üïí –û—Ç—á–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)


async def show_statistics(update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    today = datetime.now().date()
    today_checkins = [c for c in CHECKINS_DB if c['timestamp'].date() == today]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–º–µ—Ç–æ–∫
    total_qr_checkins = len(
        [c for c in CHECKINS_DB if c["method"] == "QR-–∫–æ–¥"])
    today_qr_checkins = len(
        [c for c in today_checkins if c["method"] == "QR-–∫–æ–¥"])

    # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_activity = {}
    for checkin in CHECKINS_DB:
        user_id = checkin['user_id']
        user_activity[user_id] = user_activity.get(user_id, 0) + 1

    top_users = sorted(user_activity.items(), key=lambda x: x[1],
                       reverse=True)[:5]

    stats_text = (f"üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                  f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
                  f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(USERS_DB)}\n\n"
                  f"üìç **–ü–æ—Å–µ—â–µ–Ω–∏—è (–≤—Å–µ–≥–æ):**\n"
                  f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {len(CHECKINS_DB)}\n"
                  f"‚Ä¢ –ß–µ—Ä–µ–∑ QR-–∫–æ–¥: {total_qr_checkins}\n\n"
                  f"üìÖ **–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):**\n"
                  f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {len(today_checkins)}\n"
                  f"‚Ä¢ –ß–µ—Ä–µ–∑ QR-–∫–æ–¥: {today_qr_checkins}\n\n"
                  f"üîó **QR-–∫–æ–¥:**\n"
                  f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n"
                  f"‚Ä¢ –°—Å—ã–ª–∫–∞: {QR_CODE_LINK}")

    if top_users:
        stats_text += "\n\nüèÜ **–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        for i, (user_id, count) in enumerate(top_users, 1):
            if user_id in USERS_DB:
                name = USERS_DB[user_id]['name']
                stats_text += f"{i}. {name} - {count} –ø–æ—Å–µ—â–µ–Ω–∏–π\n"

    await update.message.reply_text(stats_text, parse_mode='Markdown')


async def exit_admin_panel(update: Update,
                           context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = update.effective_user.id

    if user_id in ADMIN_SESSIONS:
        del ADMIN_SESSIONS[user_id]
    if user_id in USER_STATES:
        del USER_STATES[user_id]

    await update.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                                    reply_markup=None)


async def handle_message(update: Update,
                         context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in USER_STATES:
        state = USER_STATES[user_id]

        if state == States.WAITING_NAME:
            await handle_name_input(update, context)
            return
        elif state == States.WAITING_PHONE:
            await handle_phone_input(update, context)
            return
        elif state == States.WAITING_ADMIN_PASSWORD:
            await handle_admin_password(update, context)
            return
        elif state == States.WAITING_QR_SCAN:
            if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É":
                del USER_STATES[user_id]
                await update.message.reply_text(
                    "‚ùå –û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_user_keyboard())
                return
            else:
                await update.message.reply_text(
                    "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Ü–µ–Ω—Ç—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É\""
                )
                return
        elif state == States.CONFIRM_CLEAR_DATA:
            await confirm_clear_data(update, context)
            return
        elif state == States.CONFIRM_CLEAR_CHECKINS:
            await confirm_clear_checkins(update, context)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üìç –û—Ç–º–µ—Ç–∏—Ç—å—Å—è":
        await handle_checkin_request(update, context)
    elif text == "‚ÑπÔ∏è –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await handle_user_info(update, context)
    elif text == "üë• –û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and user_id in ADMIN_SESSIONS:
        await generate_users_report(update, context)
    elif text == "üïí –û—Ç—á–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π" and user_id in ADMIN_SESSIONS:
        await generate_checkins_report(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user_id in ADMIN_SESSIONS:
        await show_statistics(update, context)
    elif text == "üîó QR-–∫–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫" and user_id in ADMIN_SESSIONS:
        await show_qr_code(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and user_id in ADMIN_SESSIONS:
        await request_clear_data(update, context)
    elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è" and user_id in ADMIN_SESSIONS:
        await request_clear_checkins(update, context)
    elif text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏" and user_id in ADMIN_SESSIONS:
        await exit_admin_panel(update, context)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        if user_id in USERS_DB:
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                reply_markup=get_user_keyboard())
        else:
            await update.message.reply_text(
                "‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start")


async def error_handler(update: object,
                        context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("manager", manager_command))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç —Å QR-–∫–æ–¥–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üîó QR-–∫–æ–¥: {QR_CODE_LINK}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()